import groovy.json.JsonSlurper
import wtf.gofancy.fancygradle.patch.Patch
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

buildscript {
	repositories {
		maven { url = "https://files.minecraftforge.net/maven" }
	}

	dependencies {
		classpath "net.minecraftforge.gradle:ForgeGradle:$forgegradle_version"
	}
}

plugins {
	id 'org.jetbrains.kotlin.jvm'

	id 'wtf.gofancy.fancygradle'

	id 'com.diffplug.spotless'
	id 'net.kyori.blossom'

	id 'de.undercouch.download'

	id 'org.jetbrains.dokka'
}

apply plugin: 'net.minecraftforge.gradle'

version = "${minecraft_version()}-$mod_version"
group = "$domain_extensions.${developer.toLowerCase()}"
archivesBaseName = "$mod_id"
sourceCompatibility = targetCompatibility = "$jvm_version"

repositories {
	maven {
		name = "ShadowFacts"
		url = "http://maven.shadowfacts.net/"
	}
	maven {
		name = "ElytraDev"
		url = 'https://repo.elytradev.com/'
	}
	maven {
		name = "MCModDev"
		url = "https://maven.mcmoddev.com/"
	}
	maven {
		url "https://www.cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}
	maven { url 'https://jitpack.io' }
	mavenCentral()
}

dependencies {
	minecraft "net.minecraftforge:forge:${minecraft_version()}-${forge_version}"

	// Kotlin > Java
	// https://www.curseforge.com/minecraft/mc-mods/shadowfacts-forgelin
	implementation "net.shadowfacts:Forgelin:$forgelin_version"
	// I occasionally move util from my mods to PickleLib to use from other mods
	// https://www.curseforge.com/minecraft/mc-mods/picklelib
	implementation "curse.maven:picklelib-291265:$picklelib_version"
	// I want a nice editor for my entity models, this format has a nice editor
	// https://www.curseforge.com/minecraft/mc-mods/modelloader
	implementation "curse.maven:modelloader-277663:$modelloader_version"
	// GlassPane provides a way to automatically register things
	// https://www.curseforge.com/minecraft/mc-mods/glasspane
	implementation "curse.maven:glasspane-292852:$glasspane_version"
}

minecraft {
	mappings channel: "$mappings_channel", version: "$mappings_version-${minecraft_version_short()}"

	runs {
		client {
			workingDirectory project.file(working_directory)

			property 'forge.logging.markers', logging_markers
			property 'forge.logging.console.level', logging_level
		}

		server {
			property 'forge.logging.markers', logging_markers
			property 'forge.logging.console.level', logging_level
		}
	}
}

fancyGradle {
	patches {
		patch(
				Patch.RESOURCES,
				Patch.COREMODS,
				Patch.CODE_CHICKEN_LIB,
				Patch.ASM
				)
	}
}

sourceSets {
	main {
		output.resourcesDir = file('build/combined')
		java.outputDir = file('build/combined')
	}
}

tasks.withType(KotlinCompile).all {
	destinationDir = new File(buildDir, 'build/combined')
}

blossom {
	replaceToken('$[id]', mod_id)
	replaceToken('$[name]', name)
	replaceToken('$[version]', "${minecraft_version()}-$mod_version")
	replaceToken('$[min_version]', minecraft_version_short())
	replaceToken('$[max_version]', max_version)

	def input = new File("dependencies.json")
	def json = new JsonSlurper().parseText(input.text)

	def dependencies = ""

	for (i in json) {
		if (i.value.find { it.key == "required" }) {
			dependencies += "required-"

			if (i.value.find { it.key == "order" }) {
				dependencies += "${i.value.order}:"
			} else {
				dependencies += "after:"
			}
		}

		dependencies += i.key

		if (i.value.find { it.key == "version" }) {
			dependencies += "@["
			dependencies += i.value.version
			dependencies += ",)"
		}

		dependencies += ';'
	}

	replaceToken('$[dependencies]', dependencies)
}

processResources {
	rename '(.+_at.cfg)', 'META-INF/$1'
}

compileJava {
	sourceCompatibility = targetCompatibility = "$jvm_version"
}

compileKotlin {
	kotlinOptions {
		jvmTarget = jvm_version
	}
}

spotless {
	ratchetFrom 'origin/main'

	java {
		importOrder()
		removeUnusedImports()
		googleJavaFormat()

		licenseHeader "/* $license_header */\n\n"
	}

	groovyGradle {
		target '*.gradle'
		greclipse()
	}

	kotlin {
		ktlint(ktlint_version)

		licenseHeader "/* $license_header */\n\n"
	}

	format 'misc', {
		target '*.md', '.gitignore'

		trimTrailingWhitespace()
		indentWithTabs()
		endWithNewline()
	}
}
compileJava.dependsOn spotlessApply
compileKotlin.dependsOn spotlessApply

jar {
	manifest {
		attributes 'FMLAT': 'bugmagic_at.cfg'
	}
}

dokka {
	outputFormat = 'javadoc'
	outputDirectory = 'docs'

	configuration {
		reportUndocumented = true

		targets = ["JVM"]
		platform = "JVM"
	}
}

String minecraft_version() {
	return "$minecraft_major.$minecraft_minor.$minecraft_patch"
}

String minecraft_version_short() {
	return "$minecraft_major.$minecraft_minor"
}
